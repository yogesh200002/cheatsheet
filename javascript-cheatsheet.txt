JavaScript files have the extension .js similar to .css for stylesheets. External JavaScript files are used for more complex scripts.

console.log() is the command to print something to the developer console in your browser. 
You can use this to print the results from any of the following articles and exercises to the console.

Variables are simply “storage containers” for data in your code. Until recently there was only one way 
to create a variable in JavaScript — the var statement. But in the newest JavaScript versions we have two more ways — let and const.
we can combine the variable declaration and assignment into a single line
We can also declare multiple variables in one line
The var keyword is almost the same as let. It also declares a variable, but in a slightly different, “old-school” way.

There are two limitations on variable names in JavaScript:

The name must contain only letters, digits, or the symbols $ and _.
The first character must not be a digit.

Unlike many other programming languages, JavaScript does not define different types of numbers, like integers, short, long, floating-point etc.
JavaScript numbers are always stored as double precision floating point numbers,This format stores numbers in 64 bits.
Floating point arithmetic is not always 100% accurate: for example by adding 0.2 + 0.1 it gives 0.30000000000000004, 
so to prevent this we can add by (0.2 * 10 + 0.1 * 10) / 10 so it gives 0.3 as answer.
If you add two strings, the result will be a string concatenation.
JavaScript will try to convert strings to numbers in all numeric operations, but + is an exception since it is used for concatenation.

NaN is a JavaScript reserved word indicating that a number is not a legal number.
Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number).
You can use the global JavaScript function isNaN() to find out if a value is a not a number.
If you use NaN in a mathematical operation, the result will also be NaN Or the result might be a concatenation.
NaN is a number: typeof NaN returns number

Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.
Division by 0 (zero) also generates Infinity, Infinity is a number: typeof Infinity returns number.

Never write a number with a leading zero (like 07).
Some JavaScript versions interpret numbers as octal if they are written with a leading zero.

JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.

By default, JavaScript displays numbers as base 10 decimals.
But you can use the toString() method to output numbers from base 2 to base 36.
Hexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2.

Normally JavaScript numbers are primitive values created from literals,
But numbers can also be defined as objects with the keyword new. example: let y = new Number(123);
Comparing two JavaScript objects always returns false.

Difference between == and ===
0==false // true, because false is equivalent of 0 
0===false // false, because both operands are of different type 
2=="2" // true, auto type coercion, string converted into number 
2==="2" // false, since both operands are not of same type
=== is known as strictly equality operator.

You may see some people using == and != in their tests for equality and non-equality. These are valid operators in JavaScript, but they differ from ===/!==. The former versions test whether the values are the same but not whether the values' datatypes are the same. The latter, strict versions test the equality of both the values and their datatypes. The strict versions tend to result in fewer errors, so we recommend you use them.

An operator is unary if it has a single operand. For example, the unary negation - reverses the sign of a number
The unary plus or, in other words, the plus operator + applied to a single value, doesn’t do anything to numbers. But if the operand is not a number, the unary plus converts it into a number. unary pluses are applied first, they convert strings to numbers, and then the binary plus sums them up.

Chained assignments evaluate from right to left.
example: a = b = c = 2 + 2;

Concatenate just means "join together". To join together strings in JavaScript you can use a different type of string, called a template literal.
A template literal looks just like a normal string, but instead of using single or double quote marks (' or "), you use backtick characters (`)
Example:
const name = 'Chris';
const greeting = `Hello, ${name}`;
console.log(greeting); // "Hello, Chris"

You can use the same technique to join together two variables:
const one = 'Hello, ';
const two = 'how are you?';
const joined = `${one}${two}`;
console.log(joined); // "Hello, how are you?"

You can also concatenate strings using the + operator

The Number object converts anything passed to it into a number, if it can. 
every number has a method called toString() that converts it to the equivalent string.

Template literals respect the line breaks in the source code, so you can write strings that span multiple lines like this:
const output = `I like the song.
I gave it a score of 90%.`;
console.log(output);  // I like the song.
                      // I gave it a score of 90%.
We can also use \n to break the line.

By default, the replace() method replaces only the first match

All string methods return a new string. They don't modify the original string.
Formally said:
Strings are immutable: Strings cannot be changed, only replaced.

text.split(",")    // Split on commas
text.split(" ")    // Split on spaces
text.split("|")    // Split on pipe

To see whether a string is greater than another, JavaScript uses the so-called “dictionary” or “lexicographical” order.
In other words, strings are compared letter-by-letter.
When comparing values of different types, JavaScript converts the values to numbers.

In JavaScript we have the following conditional statements:

Use if to specify a block of code to be executed, if a specified condition is true
Use else to specify a block of code to be executed, if the same condition is false
Use else if to specify a new condition to test, if the first condition is false
Use switch to specify many alternative blocks of code to be executed

Any value that is not false, undefined, null, 0, NaN, or an empty string ('') actually returns true when tested as a conditional statement, therefore you can use a variable name on its own to test whether it is true, or even that it exists (that is, it is not undefined.)

Ternary Operator
The ternary or conditional operator is a small bit of syntax that tests a condition and returns one value/expression if it is true, and another if it is false — this can be useful in some situations, and can take up a lot less code than an if...else block if you have two choices that are chosen between via a true/false condition.
The pseudocode looks like this:

( condition ) ? run this code : run this code instead
The ternary operator is not just for setting variable values; you can also run functions, or lines of code — anything you like.
A sequence of question mark operators ? can return a value that depends on more than one condition.

Slicing
The slice() method extracts parts of a string and returns the extracted parts in a new string.
The substr() method extracts parts of a string, beginning at the character at the specified position, and returns the specified number of characters.
The substring() method extracts parts of a string and returns the extracted parts in a new string.

Functions
Functions are values. They can be assigned, copied or declared in any place of the code.
If the function is declared as a separate statement in the main code flow, that’s called a “Function Declaration”.
If the function is created as a part of an expression, it’s called a “Function Expression”.
Function Declarations are processed before the code block is executed. They are visible everywhere in the block.
Function Expressions are created when the execution flow reaches them.
As a rule of thumb, when we need to declare a function, the first to consider is Function Declaration syntax. It gives more freedom in how to organize our code, because we can call such functions before they are declared.
That’s also better for readability, as it’s easier to look up function f(…) {…} in the code than let f = function(…) {…};. Function Declarations are more “eye-catching”.
…But if a Function Declaration does not suit us for some reason, or we need a conditional declaration, then Function Expression should be used.

Example of function Declaration:
function sayHi() {
  alert( "Hello" );
}

Example of function Expression:
let sayHi = function() {
  alert( "Hello" );
};

Arrow Functions
It’s called “arrow functions”, because it looks like this:
let func = (arg1, arg2, ..., argN) => expression;

In other words, it’s the shorter version of:
let func = function(arg1, arg2, ..., argN) {
  return expression;
};

Sometimes we need something a little bit more complex, like multiple expressions or statements. It is also possible, but we should enclose them in curly braces. Then use a normal return within them.
like this
let sum = (a, b) => {  // the curly brace opens a multiline function
  let result = a + b;
  return result; // if we use curly braces, then we need an explicit "return"
};

alert( sum(1, 2) ); // 3

Default Parameters
If you're writing a function and want to support optional parameters, you can specify default values by adding = after the name of the parameter, followed by the default value:
function hello(name='Chris') {
  console.log(`Hello ${name}!`);
}
hello('Ari'); // Hello Ari!
hello();      // Hello Chris!

anonymous function
function() {
  alert('hello');
}
This is called an anonymous function, because it has no name. You'll often see anonymous functions when a function expects to receive another function as a parameter. In this case the function parameter is often passed as an anonymous function.
